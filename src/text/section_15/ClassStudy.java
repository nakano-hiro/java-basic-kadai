package text.section_15;

public class ClassStudy {

	public static void main(String[] args) {

		// 【クラス】：オブジェクト（モノ）の設計図
		// 商品で例えると、
		// 商品（オブジェクト）には「商品名」「価格」など共通する特徴がある。
		// この共通する特徴を設計図にしたもの。
		
		// 定義方法:例⇒3行目
		// アクセス修飾子 class クラス名 {
	    // クラスの中身
	    // }
		
		// クラスを元に作られたオブジェクトをインスタンスと呼ぶ。

	    // 使い方:例⇒67.68行目
		// クラス名 インスタンス名 = new クラス名( データ1, データ2,・・・ );
		
		
		
		// 【フィールド】：オブジェクトが持つ内部データ（変数）
		
		// ≪宣言方法≫例⇒Productファイル 6～9行目
		// アクセス修飾子 データ型 フィールド名;
		// アクセス修飾子 データ型 フィールド名 = 初期値; // 初期化あり
		
		// ≪参照方法（クラス外）≫
		// インスタンス名.フィールド名
	
		// ≪参照方法（クラス内）≫
		// this.フィールド名
		
		
		
		//	【メソッド】：オブジェクトモノが持つ機能・動作
		
		// ≪宣言方法≫
		// アクセス修飾子 データ型 フィールド名;
		// アクセス修飾子 データ型 フィールド名 = 初期値; // 初期化あり
		
		// ≪呼び出し方≫
		// インスタンス名.メソッド名( データ1, データ2,・・・);
		
		
		
		//	【コンストラクタ】：インスタンス化するときに初期化処理を行うメソッド
		
		// ≪定義方法≫例⇒Productファイル 11～19行目
		// アクセス修飾子 クラス名( 引数1の宣言, 引数2の宣言,・・・) {
	    // 初期化処理;
	    // }
		// ≪呼び出し方≫
		// クラス名 インスタンス名 = new クラス名( データ1, データ2,・・・);
		
		
		
		//	【import（インポート）】：他パッケージのクラスを取り込む手続き
		// import パッケージ名.クラス名;

		
		
		
		// 商品データを生成
		Product shampoo = new Product("シャンプー", 800, 10);
		Product coffee = new Product("コーヒー", 500, 5);

		// シャンプーを7点注文
		shampoo.takeOrder(7);

		// コーヒーを3点注文
		coffee.takeOrder(3);

		// シャンプーを5点注文
		shampoo.takeOrder(5);

	}

}
